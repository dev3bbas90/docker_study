

https://www.youtube.com/watch?v=nINTOS2fhVY&list=PLX1bW_GeBRhDkTf_jbdvBbkHs2LCWVeXZ&index=23

docker run -d -p 80:80 docker/getting-started

docker run postgress

// e env variable
docker run -e POSTGRES_PASSWORD=root -d postgres

docker exec -it {container ID} {command Like : sh / ping localhost / ls}


docker images
// List containers
docker ps
// show closed containers 
docker ps -a

docker container ls -a

dockr pull dev3bbas/test-repo
dockr pull library/test-repo

// remove image from my local {image id} or {image name}
docker rmi test-repo


// remove container from my local {container id} or {container name}
docker rm {id}

// stop running container 
docker stop {Image id} >> terminate take 10s
docker kill {container id} >> close immediate


// make container
docker run test-repo
docker run --name=rerer test-repo

// run image in background
docker run -d test-repo
// return id of container

// show container logs
docker logs {id}
docker logs -f {myImage}

// remove past / old containers (not current working) نشيل الكونتينرس القديمة 

docker system prune -a


// busybox >> just test environment
docker run busybox
docker run busybox ping localhost
docker run -d busybox ping localhost

// docker inspect >> return details & commands & ...
docker inspect {image id} or {image name}


// Fedora Linux OS
docker run fedora

docker images

// delete image by its name (delete locally)
docker image rm {repository / ID name ex: fedora}

// right sentence (base command)
docker {parent EX: container / image / ..} { command EX: run / pull ...}

// redis >> db light lib.
docker container run redis
docker container run redis:{tag default: latest}
docker container run redis:alpine

// exit CTR + P CTR + q

docker logs {ID OR any unique part of id like : 800}

// واخد رامات اد اي  cpu usage , memory , net  , ...
docker stats {container ID}

docker info

// get container ip
docker inspect -f='{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 800c
-f (--format) 
800c (container ID) 

-d >> --detach

-p >> --publish + 80:80 << port ( one of its exposed ports )
--name << set name to container


docker container run --detach --publish 80:80 --name testName nginx
// and test in browser

docker container stop testName
docker container start testName


// exposed ports distinct for each image

>> open new terminal to container (bash)

docker exec -it testName bash
    >># service nginx status
    >># service nginx reload
    >># service nginx stop << exit container (close service & stop container)
    
    >># ls << list files & folders i this container 
    >>#  ls { any sub folder inside ✔ }
    >>#  nginx -T >> Config file info
    >>#  cd  etc/nginx/...
    >>#  cd .. >> backword
    >>#  cd - >> backword
    >>#  cd / >> root
    >>#  cd >> tenda ~ dont list files

    >>#  mkdir NewFolder  >> new folder
    >>#  cd NewFolder
    >>#  touch index.html >> new file
    
    >>#  cp {file/folder} {new folder}  
    >>#  cp index.html contentFolder  
    >>#  

    >>#  rm index.html   << remove  file or folder
    
    >>#    
    >>#  

Docker Tags 
    each image has many tags 
    can pull image by tag
    ex (7.1 7.2) >> default (latest)

Image Layers
    any change on image is considered a separate layer :  اي تغيير عليها يعتبر طبقة منفصلة 
    EX  :
    [
        App     >> d12...
        Appache >> 800c...
        Ubunto  >> a4e...
    ]

Docker File 
    all your commands saved in docker file
    * Docker can build image automatically by reading instructions from docker file 
    * الملف دا فيه كل الاوامر اللي محتاجينها لعمل image 
    * contains all commands .
    * docker client who read it

* In tags tab ther is Digest >> id that we deal with in power shell
* click any tag to see all commands that be run to arrive to this version



>> docker history {Image Like: redis / nginx} >> show commands

// create tag (copy of image)
>> docker tag {USERNAME}/{IMAGE}
>> dockre tag redis dev3bbas/myRedis >> latest
>> dockre tag redis dev3bbas/myRedis:firstTag
// all tags refere to same image id

///////////////////// PUSH
>> docker push dev3bbas/myRedis

////////////////////////// LOGIN
>> docker login 
    then enter USERNAME & password

>> docker logout

// After i create dockerImage Folder then docker file

>> docker build .
>> docker image ls 
>> docker container run {this image id  note: this image name now be <none>}
>>  docker build --tag firstTag .            >> override past build with name firstTag with same ID
>>  

//    after any change we must build with same or different tag 
//    if we are in different path and need to build

>>  docker build --tag V1.0 c:/dockerImage
>>  docker run -d -p 4200:80 --name helpdesk helpdeskImageName


// Network

>>  docker network ls
>>  docker network inspect {network : bridge}
>>  docker network create --diver bridge n1

// run container on network
>>  docker run network=n1 -d -it Ubunto
>>  docker network inspect n1


// wsl >> windows subsystem for linux 
>>  
>>  

build local image (ex laravel proj)
>>  docker build --tag jsons_filter:v0.5 .
// then run container with port
>>  docker run -d -p 90:90 --name json_filter_proj jsons_filter:v0.5
>>  docker-compose up --build
>>  docker-compose up -d
>>  docker-compose down
>>  docker-compose start
>>  docker-compose stop

// list all containers
>>  docker-compose ps 
>>  

